/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.swatikher.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transfer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7816890897566071063L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transfer\",\"namespace\":\"com.swatikher.schema\",\"fields\":[{\"name\":\"location\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sku\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serialNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sellableFlag\",\"type\":\"boolean\"},{\"name\":\"inventoryType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"skuDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transfer> ENCODER =
      new BinaryMessageEncoder<Transfer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transfer> DECODER =
      new BinaryMessageDecoder<Transfer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transfer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transfer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transfer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transfer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transfer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transfer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transfer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transfer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String location;
   private java.lang.String sku;
   private java.lang.String serialNumber;
   private boolean sellableFlag;
   private java.lang.String inventoryType;
   private java.lang.String skuDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transfer() {}

  /**
   * All-args constructor.
   * @param location The new value for location
   * @param sku The new value for sku
   * @param serialNumber The new value for serialNumber
   * @param sellableFlag The new value for sellableFlag
   * @param inventoryType The new value for inventoryType
   * @param skuDescription The new value for skuDescription
   */
  public Transfer(java.lang.String location, java.lang.String sku, java.lang.String serialNumber, java.lang.Boolean sellableFlag, java.lang.String inventoryType, java.lang.String skuDescription) {
    this.location = location;
    this.sku = sku;
    this.serialNumber = serialNumber;
    this.sellableFlag = sellableFlag;
    this.inventoryType = inventoryType;
    this.skuDescription = skuDescription;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return location;
    case 1: return sku;
    case 2: return serialNumber;
    case 3: return sellableFlag;
    case 4: return inventoryType;
    case 5: return skuDescription;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: location = value$ != null ? value$.toString() : null; break;
    case 1: sku = value$ != null ? value$.toString() : null; break;
    case 2: serialNumber = value$ != null ? value$.toString() : null; break;
    case 3: sellableFlag = (java.lang.Boolean)value$; break;
    case 4: inventoryType = value$ != null ? value$.toString() : null; break;
    case 5: skuDescription = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.String getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.String value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'sku' field.
   * @return The value of the 'sku' field.
   */
  public java.lang.String getSku() {
    return sku;
  }


  /**
   * Sets the value of the 'sku' field.
   * @param value the value to set.
   */
  public void setSku(java.lang.String value) {
    this.sku = value;
  }

  /**
   * Gets the value of the 'serialNumber' field.
   * @return The value of the 'serialNumber' field.
   */
  public java.lang.String getSerialNumber() {
    return serialNumber;
  }


  /**
   * Sets the value of the 'serialNumber' field.
   * @param value the value to set.
   */
  public void setSerialNumber(java.lang.String value) {
    this.serialNumber = value;
  }

  /**
   * Gets the value of the 'sellableFlag' field.
   * @return The value of the 'sellableFlag' field.
   */
  public boolean getSellableFlag() {
    return sellableFlag;
  }


  /**
   * Sets the value of the 'sellableFlag' field.
   * @param value the value to set.
   */
  public void setSellableFlag(boolean value) {
    this.sellableFlag = value;
  }

  /**
   * Gets the value of the 'inventoryType' field.
   * @return The value of the 'inventoryType' field.
   */
  public java.lang.String getInventoryType() {
    return inventoryType;
  }


  /**
   * Sets the value of the 'inventoryType' field.
   * @param value the value to set.
   */
  public void setInventoryType(java.lang.String value) {
    this.inventoryType = value;
  }

  /**
   * Gets the value of the 'skuDescription' field.
   * @return The value of the 'skuDescription' field.
   */
  public java.lang.String getSkuDescription() {
    return skuDescription;
  }


  /**
   * Sets the value of the 'skuDescription' field.
   * @param value the value to set.
   */
  public void setSkuDescription(java.lang.String value) {
    this.skuDescription = value;
  }

  /**
   * Creates a new Transfer RecordBuilder.
   * @return A new Transfer RecordBuilder
   */
  public static com.swatikher.schema.Transfer.Builder newBuilder() {
    return new com.swatikher.schema.Transfer.Builder();
  }

  /**
   * Creates a new Transfer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transfer RecordBuilder
   */
  public static com.swatikher.schema.Transfer.Builder newBuilder(com.swatikher.schema.Transfer.Builder other) {
    if (other == null) {
      return new com.swatikher.schema.Transfer.Builder();
    } else {
      return new com.swatikher.schema.Transfer.Builder(other);
    }
  }

  /**
   * Creates a new Transfer RecordBuilder by copying an existing Transfer instance.
   * @param other The existing instance to copy.
   * @return A new Transfer RecordBuilder
   */
  public static com.swatikher.schema.Transfer.Builder newBuilder(com.swatikher.schema.Transfer other) {
    if (other == null) {
      return new com.swatikher.schema.Transfer.Builder();
    } else {
      return new com.swatikher.schema.Transfer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transfer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transfer>
    implements org.apache.avro.data.RecordBuilder<Transfer> {

    private java.lang.String location;
    private java.lang.String sku;
    private java.lang.String serialNumber;
    private boolean sellableFlag;
    private java.lang.String inventoryType;
    private java.lang.String skuDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.swatikher.schema.Transfer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sku)) {
        this.sku = data().deepCopy(fields()[1].schema(), other.sku);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.serialNumber)) {
        this.serialNumber = data().deepCopy(fields()[2].schema(), other.serialNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sellableFlag)) {
        this.sellableFlag = data().deepCopy(fields()[3].schema(), other.sellableFlag);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.inventoryType)) {
        this.inventoryType = data().deepCopy(fields()[4].schema(), other.inventoryType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.skuDescription)) {
        this.skuDescription = data().deepCopy(fields()[5].schema(), other.skuDescription);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Transfer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.swatikher.schema.Transfer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sku)) {
        this.sku = data().deepCopy(fields()[1].schema(), other.sku);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serialNumber)) {
        this.serialNumber = data().deepCopy(fields()[2].schema(), other.serialNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sellableFlag)) {
        this.sellableFlag = data().deepCopy(fields()[3].schema(), other.sellableFlag);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.inventoryType)) {
        this.inventoryType = data().deepCopy(fields()[4].schema(), other.inventoryType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.skuDescription)) {
        this.skuDescription = data().deepCopy(fields()[5].schema(), other.skuDescription);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.String getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder setLocation(java.lang.String value) {
      validate(fields()[0], value);
      this.location = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder clearLocation() {
      location = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sku' field.
      * @return The value.
      */
    public java.lang.String getSku() {
      return sku;
    }


    /**
      * Sets the value of the 'sku' field.
      * @param value The value of 'sku'.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder setSku(java.lang.String value) {
      validate(fields()[1], value);
      this.sku = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sku' field has been set.
      * @return True if the 'sku' field has been set, false otherwise.
      */
    public boolean hasSku() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sku' field.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder clearSku() {
      sku = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'serialNumber' field.
      * @return The value.
      */
    public java.lang.String getSerialNumber() {
      return serialNumber;
    }


    /**
      * Sets the value of the 'serialNumber' field.
      * @param value The value of 'serialNumber'.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder setSerialNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.serialNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'serialNumber' field has been set.
      * @return True if the 'serialNumber' field has been set, false otherwise.
      */
    public boolean hasSerialNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'serialNumber' field.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder clearSerialNumber() {
      serialNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellableFlag' field.
      * @return The value.
      */
    public boolean getSellableFlag() {
      return sellableFlag;
    }


    /**
      * Sets the value of the 'sellableFlag' field.
      * @param value The value of 'sellableFlag'.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder setSellableFlag(boolean value) {
      validate(fields()[3], value);
      this.sellableFlag = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sellableFlag' field has been set.
      * @return True if the 'sellableFlag' field has been set, false otherwise.
      */
    public boolean hasSellableFlag() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sellableFlag' field.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder clearSellableFlag() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'inventoryType' field.
      * @return The value.
      */
    public java.lang.String getInventoryType() {
      return inventoryType;
    }


    /**
      * Sets the value of the 'inventoryType' field.
      * @param value The value of 'inventoryType'.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder setInventoryType(java.lang.String value) {
      validate(fields()[4], value);
      this.inventoryType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryType' field has been set.
      * @return True if the 'inventoryType' field has been set, false otherwise.
      */
    public boolean hasInventoryType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'inventoryType' field.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder clearInventoryType() {
      inventoryType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'skuDescription' field.
      * @return The value.
      */
    public java.lang.String getSkuDescription() {
      return skuDescription;
    }


    /**
      * Sets the value of the 'skuDescription' field.
      * @param value The value of 'skuDescription'.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder setSkuDescription(java.lang.String value) {
      validate(fields()[5], value);
      this.skuDescription = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'skuDescription' field has been set.
      * @return True if the 'skuDescription' field has been set, false otherwise.
      */
    public boolean hasSkuDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'skuDescription' field.
      * @return This builder.
      */
    public com.swatikher.schema.Transfer.Builder clearSkuDescription() {
      skuDescription = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transfer build() {
      try {
        Transfer record = new Transfer();
        record.location = fieldSetFlags()[0] ? this.location : (java.lang.String) defaultValue(fields()[0]);
        record.sku = fieldSetFlags()[1] ? this.sku : (java.lang.String) defaultValue(fields()[1]);
        record.serialNumber = fieldSetFlags()[2] ? this.serialNumber : (java.lang.String) defaultValue(fields()[2]);
        record.sellableFlag = fieldSetFlags()[3] ? this.sellableFlag : (java.lang.Boolean) defaultValue(fields()[3]);
        record.inventoryType = fieldSetFlags()[4] ? this.inventoryType : (java.lang.String) defaultValue(fields()[4]);
        record.skuDescription = fieldSetFlags()[5] ? this.skuDescription : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transfer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transfer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transfer>
    READER$ = (org.apache.avro.io.DatumReader<Transfer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.location);

    out.writeString(this.sku);

    out.writeString(this.serialNumber);

    out.writeBoolean(this.sellableFlag);

    out.writeString(this.inventoryType);

    if (this.skuDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.skuDescription);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.location = in.readString();

      this.sku = in.readString();

      this.serialNumber = in.readString();

      this.sellableFlag = in.readBoolean();

      this.inventoryType = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.skuDescription = null;
      } else {
        this.skuDescription = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.location = in.readString();
          break;

        case 1:
          this.sku = in.readString();
          break;

        case 2:
          this.serialNumber = in.readString();
          break;

        case 3:
          this.sellableFlag = in.readBoolean();
          break;

        case 4:
          this.inventoryType = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.skuDescription = null;
          } else {
            this.skuDescription = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










