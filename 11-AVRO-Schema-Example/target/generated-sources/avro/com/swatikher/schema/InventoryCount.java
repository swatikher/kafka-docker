/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.swatikher.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InventoryCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6349466338928707281L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InventoryCount\",\"namespace\":\"com.swatikher.schema\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"location\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sku\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inventoryStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inventoryType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sellableFlag\",\"type\":\"boolean\"},{\"name\":\"globalQuantity\",\"type\":\"long\",\"doc\":\"Quantity of SKU/Status/Type/Sellable\"},{\"name\":\"localQuantity\",\"type\":\"long\",\"doc\":\"Quantity of Location/SKU/Status/Type/Sellable\"},{\"name\":\"serialNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"process\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"movementSource\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"locationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"materialDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastUpdatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InventoryCount> ENCODER =
      new BinaryMessageEncoder<InventoryCount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InventoryCount> DECODER =
      new BinaryMessageDecoder<InventoryCount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InventoryCount> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InventoryCount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InventoryCount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InventoryCount>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InventoryCount to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InventoryCount from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InventoryCount instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InventoryCount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String state;
   private java.lang.String location;
   private java.lang.String sku;
   private java.lang.String inventoryStatus;
   private java.lang.String inventoryType;
   private boolean sellableFlag;
  /** Quantity of SKU/Status/Type/Sellable */
   private long globalQuantity;
  /** Quantity of Location/SKU/Status/Type/Sellable */
   private long localQuantity;
   private java.lang.String serialNumber;
   private java.lang.String eventId;
   private java.lang.String process;
   private java.lang.String movementSource;
   private java.lang.String locationType;
   private java.lang.String materialDescription;
   private java.lang.String createdBy;
   private java.lang.String lastUpdatedBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InventoryCount() {}

  /**
   * All-args constructor.
   * @param state The new value for state
   * @param location The new value for location
   * @param sku The new value for sku
   * @param inventoryStatus The new value for inventoryStatus
   * @param inventoryType The new value for inventoryType
   * @param sellableFlag The new value for sellableFlag
   * @param globalQuantity Quantity of SKU/Status/Type/Sellable
   * @param localQuantity Quantity of Location/SKU/Status/Type/Sellable
   * @param serialNumber The new value for serialNumber
   * @param eventId The new value for eventId
   * @param process The new value for process
   * @param movementSource The new value for movementSource
   * @param locationType The new value for locationType
   * @param materialDescription The new value for materialDescription
   * @param createdBy The new value for createdBy
   * @param lastUpdatedBy The new value for lastUpdatedBy
   */
  public InventoryCount(java.lang.String state, java.lang.String location, java.lang.String sku, java.lang.String inventoryStatus, java.lang.String inventoryType, java.lang.Boolean sellableFlag, java.lang.Long globalQuantity, java.lang.Long localQuantity, java.lang.String serialNumber, java.lang.String eventId, java.lang.String process, java.lang.String movementSource, java.lang.String locationType, java.lang.String materialDescription, java.lang.String createdBy, java.lang.String lastUpdatedBy) {
    this.state = state;
    this.location = location;
    this.sku = sku;
    this.inventoryStatus = inventoryStatus;
    this.inventoryType = inventoryType;
    this.sellableFlag = sellableFlag;
    this.globalQuantity = globalQuantity;
    this.localQuantity = localQuantity;
    this.serialNumber = serialNumber;
    this.eventId = eventId;
    this.process = process;
    this.movementSource = movementSource;
    this.locationType = locationType;
    this.materialDescription = materialDescription;
    this.createdBy = createdBy;
    this.lastUpdatedBy = lastUpdatedBy;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return state;
    case 1: return location;
    case 2: return sku;
    case 3: return inventoryStatus;
    case 4: return inventoryType;
    case 5: return sellableFlag;
    case 6: return globalQuantity;
    case 7: return localQuantity;
    case 8: return serialNumber;
    case 9: return eventId;
    case 10: return process;
    case 11: return movementSource;
    case 12: return locationType;
    case 13: return materialDescription;
    case 14: return createdBy;
    case 15: return lastUpdatedBy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: state = value$ != null ? value$.toString() : null; break;
    case 1: location = value$ != null ? value$.toString() : null; break;
    case 2: sku = value$ != null ? value$.toString() : null; break;
    case 3: inventoryStatus = value$ != null ? value$.toString() : null; break;
    case 4: inventoryType = value$ != null ? value$.toString() : null; break;
    case 5: sellableFlag = (java.lang.Boolean)value$; break;
    case 6: globalQuantity = (java.lang.Long)value$; break;
    case 7: localQuantity = (java.lang.Long)value$; break;
    case 8: serialNumber = value$ != null ? value$.toString() : null; break;
    case 9: eventId = value$ != null ? value$.toString() : null; break;
    case 10: process = value$ != null ? value$.toString() : null; break;
    case 11: movementSource = value$ != null ? value$.toString() : null; break;
    case 12: locationType = value$ != null ? value$.toString() : null; break;
    case 13: materialDescription = value$ != null ? value$.toString() : null; break;
    case 14: createdBy = value$ != null ? value$.toString() : null; break;
    case 15: lastUpdatedBy = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.String getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.String value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'sku' field.
   * @return The value of the 'sku' field.
   */
  public java.lang.String getSku() {
    return sku;
  }


  /**
   * Sets the value of the 'sku' field.
   * @param value the value to set.
   */
  public void setSku(java.lang.String value) {
    this.sku = value;
  }

  /**
   * Gets the value of the 'inventoryStatus' field.
   * @return The value of the 'inventoryStatus' field.
   */
  public java.lang.String getInventoryStatus() {
    return inventoryStatus;
  }


  /**
   * Sets the value of the 'inventoryStatus' field.
   * @param value the value to set.
   */
  public void setInventoryStatus(java.lang.String value) {
    this.inventoryStatus = value;
  }

  /**
   * Gets the value of the 'inventoryType' field.
   * @return The value of the 'inventoryType' field.
   */
  public java.lang.String getInventoryType() {
    return inventoryType;
  }


  /**
   * Sets the value of the 'inventoryType' field.
   * @param value the value to set.
   */
  public void setInventoryType(java.lang.String value) {
    this.inventoryType = value;
  }

  /**
   * Gets the value of the 'sellableFlag' field.
   * @return The value of the 'sellableFlag' field.
   */
  public boolean getSellableFlag() {
    return sellableFlag;
  }


  /**
   * Sets the value of the 'sellableFlag' field.
   * @param value the value to set.
   */
  public void setSellableFlag(boolean value) {
    this.sellableFlag = value;
  }

  /**
   * Gets the value of the 'globalQuantity' field.
   * @return Quantity of SKU/Status/Type/Sellable
   */
  public long getGlobalQuantity() {
    return globalQuantity;
  }


  /**
   * Sets the value of the 'globalQuantity' field.
   * Quantity of SKU/Status/Type/Sellable
   * @param value the value to set.
   */
  public void setGlobalQuantity(long value) {
    this.globalQuantity = value;
  }

  /**
   * Gets the value of the 'localQuantity' field.
   * @return Quantity of Location/SKU/Status/Type/Sellable
   */
  public long getLocalQuantity() {
    return localQuantity;
  }


  /**
   * Sets the value of the 'localQuantity' field.
   * Quantity of Location/SKU/Status/Type/Sellable
   * @param value the value to set.
   */
  public void setLocalQuantity(long value) {
    this.localQuantity = value;
  }

  /**
   * Gets the value of the 'serialNumber' field.
   * @return The value of the 'serialNumber' field.
   */
  public java.lang.String getSerialNumber() {
    return serialNumber;
  }


  /**
   * Sets the value of the 'serialNumber' field.
   * @param value the value to set.
   */
  public void setSerialNumber(java.lang.String value) {
    this.serialNumber = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'process' field.
   * @return The value of the 'process' field.
   */
  public java.lang.String getProcess() {
    return process;
  }


  /**
   * Sets the value of the 'process' field.
   * @param value the value to set.
   */
  public void setProcess(java.lang.String value) {
    this.process = value;
  }

  /**
   * Gets the value of the 'movementSource' field.
   * @return The value of the 'movementSource' field.
   */
  public java.lang.String getMovementSource() {
    return movementSource;
  }


  /**
   * Sets the value of the 'movementSource' field.
   * @param value the value to set.
   */
  public void setMovementSource(java.lang.String value) {
    this.movementSource = value;
  }

  /**
   * Gets the value of the 'locationType' field.
   * @return The value of the 'locationType' field.
   */
  public java.lang.String getLocationType() {
    return locationType;
  }


  /**
   * Sets the value of the 'locationType' field.
   * @param value the value to set.
   */
  public void setLocationType(java.lang.String value) {
    this.locationType = value;
  }

  /**
   * Gets the value of the 'materialDescription' field.
   * @return The value of the 'materialDescription' field.
   */
  public java.lang.String getMaterialDescription() {
    return materialDescription;
  }


  /**
   * Sets the value of the 'materialDescription' field.
   * @param value the value to set.
   */
  public void setMaterialDescription(java.lang.String value) {
    this.materialDescription = value;
  }

  /**
   * Gets the value of the 'createdBy' field.
   * @return The value of the 'createdBy' field.
   */
  public java.lang.String getCreatedBy() {
    return createdBy;
  }


  /**
   * Sets the value of the 'createdBy' field.
   * @param value the value to set.
   */
  public void setCreatedBy(java.lang.String value) {
    this.createdBy = value;
  }

  /**
   * Gets the value of the 'lastUpdatedBy' field.
   * @return The value of the 'lastUpdatedBy' field.
   */
  public java.lang.String getLastUpdatedBy() {
    return lastUpdatedBy;
  }


  /**
   * Sets the value of the 'lastUpdatedBy' field.
   * @param value the value to set.
   */
  public void setLastUpdatedBy(java.lang.String value) {
    this.lastUpdatedBy = value;
  }

  /**
   * Creates a new InventoryCount RecordBuilder.
   * @return A new InventoryCount RecordBuilder
   */
  public static com.swatikher.schema.InventoryCount.Builder newBuilder() {
    return new com.swatikher.schema.InventoryCount.Builder();
  }

  /**
   * Creates a new InventoryCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InventoryCount RecordBuilder
   */
  public static com.swatikher.schema.InventoryCount.Builder newBuilder(com.swatikher.schema.InventoryCount.Builder other) {
    if (other == null) {
      return new com.swatikher.schema.InventoryCount.Builder();
    } else {
      return new com.swatikher.schema.InventoryCount.Builder(other);
    }
  }

  /**
   * Creates a new InventoryCount RecordBuilder by copying an existing InventoryCount instance.
   * @param other The existing instance to copy.
   * @return A new InventoryCount RecordBuilder
   */
  public static com.swatikher.schema.InventoryCount.Builder newBuilder(com.swatikher.schema.InventoryCount other) {
    if (other == null) {
      return new com.swatikher.schema.InventoryCount.Builder();
    } else {
      return new com.swatikher.schema.InventoryCount.Builder(other);
    }
  }

  /**
   * RecordBuilder for InventoryCount instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InventoryCount>
    implements org.apache.avro.data.RecordBuilder<InventoryCount> {

    private java.lang.String state;
    private java.lang.String location;
    private java.lang.String sku;
    private java.lang.String inventoryStatus;
    private java.lang.String inventoryType;
    private boolean sellableFlag;
    /** Quantity of SKU/Status/Type/Sellable */
    private long globalQuantity;
    /** Quantity of Location/SKU/Status/Type/Sellable */
    private long localQuantity;
    private java.lang.String serialNumber;
    private java.lang.String eventId;
    private java.lang.String process;
    private java.lang.String movementSource;
    private java.lang.String locationType;
    private java.lang.String materialDescription;
    private java.lang.String createdBy;
    private java.lang.String lastUpdatedBy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.swatikher.schema.InventoryCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sku)) {
        this.sku = data().deepCopy(fields()[2].schema(), other.sku);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.inventoryStatus)) {
        this.inventoryStatus = data().deepCopy(fields()[3].schema(), other.inventoryStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.inventoryType)) {
        this.inventoryType = data().deepCopy(fields()[4].schema(), other.inventoryType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.sellableFlag)) {
        this.sellableFlag = data().deepCopy(fields()[5].schema(), other.sellableFlag);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.globalQuantity)) {
        this.globalQuantity = data().deepCopy(fields()[6].schema(), other.globalQuantity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.localQuantity)) {
        this.localQuantity = data().deepCopy(fields()[7].schema(), other.localQuantity);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.serialNumber)) {
        this.serialNumber = data().deepCopy(fields()[8].schema(), other.serialNumber);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.eventId)) {
        this.eventId = data().deepCopy(fields()[9].schema(), other.eventId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.process)) {
        this.process = data().deepCopy(fields()[10].schema(), other.process);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.movementSource)) {
        this.movementSource = data().deepCopy(fields()[11].schema(), other.movementSource);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.locationType)) {
        this.locationType = data().deepCopy(fields()[12].schema(), other.locationType);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.materialDescription)) {
        this.materialDescription = data().deepCopy(fields()[13].schema(), other.materialDescription);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[14].schema(), other.createdBy);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.lastUpdatedBy)) {
        this.lastUpdatedBy = data().deepCopy(fields()[15].schema(), other.lastUpdatedBy);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing InventoryCount instance
     * @param other The existing instance to copy.
     */
    private Builder(com.swatikher.schema.InventoryCount other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sku)) {
        this.sku = data().deepCopy(fields()[2].schema(), other.sku);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inventoryStatus)) {
        this.inventoryStatus = data().deepCopy(fields()[3].schema(), other.inventoryStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.inventoryType)) {
        this.inventoryType = data().deepCopy(fields()[4].schema(), other.inventoryType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sellableFlag)) {
        this.sellableFlag = data().deepCopy(fields()[5].schema(), other.sellableFlag);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.globalQuantity)) {
        this.globalQuantity = data().deepCopy(fields()[6].schema(), other.globalQuantity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.localQuantity)) {
        this.localQuantity = data().deepCopy(fields()[7].schema(), other.localQuantity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.serialNumber)) {
        this.serialNumber = data().deepCopy(fields()[8].schema(), other.serialNumber);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.eventId)) {
        this.eventId = data().deepCopy(fields()[9].schema(), other.eventId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.process)) {
        this.process = data().deepCopy(fields()[10].schema(), other.process);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.movementSource)) {
        this.movementSource = data().deepCopy(fields()[11].schema(), other.movementSource);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.locationType)) {
        this.locationType = data().deepCopy(fields()[12].schema(), other.locationType);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.materialDescription)) {
        this.materialDescription = data().deepCopy(fields()[13].schema(), other.materialDescription);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[14].schema(), other.createdBy);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.lastUpdatedBy)) {
        this.lastUpdatedBy = data().deepCopy(fields()[15].schema(), other.lastUpdatedBy);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setState(java.lang.String value) {
      validate(fields()[0], value);
      this.state = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearState() {
      state = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.String getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setLocation(java.lang.String value) {
      validate(fields()[1], value);
      this.location = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearLocation() {
      location = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sku' field.
      * @return The value.
      */
    public java.lang.String getSku() {
      return sku;
    }


    /**
      * Sets the value of the 'sku' field.
      * @param value The value of 'sku'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setSku(java.lang.String value) {
      validate(fields()[2], value);
      this.sku = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sku' field has been set.
      * @return True if the 'sku' field has been set, false otherwise.
      */
    public boolean hasSku() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sku' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearSku() {
      sku = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'inventoryStatus' field.
      * @return The value.
      */
    public java.lang.String getInventoryStatus() {
      return inventoryStatus;
    }


    /**
      * Sets the value of the 'inventoryStatus' field.
      * @param value The value of 'inventoryStatus'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setInventoryStatus(java.lang.String value) {
      validate(fields()[3], value);
      this.inventoryStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryStatus' field has been set.
      * @return True if the 'inventoryStatus' field has been set, false otherwise.
      */
    public boolean hasInventoryStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'inventoryStatus' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearInventoryStatus() {
      inventoryStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'inventoryType' field.
      * @return The value.
      */
    public java.lang.String getInventoryType() {
      return inventoryType;
    }


    /**
      * Sets the value of the 'inventoryType' field.
      * @param value The value of 'inventoryType'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setInventoryType(java.lang.String value) {
      validate(fields()[4], value);
      this.inventoryType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryType' field has been set.
      * @return True if the 'inventoryType' field has been set, false otherwise.
      */
    public boolean hasInventoryType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'inventoryType' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearInventoryType() {
      inventoryType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellableFlag' field.
      * @return The value.
      */
    public boolean getSellableFlag() {
      return sellableFlag;
    }


    /**
      * Sets the value of the 'sellableFlag' field.
      * @param value The value of 'sellableFlag'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setSellableFlag(boolean value) {
      validate(fields()[5], value);
      this.sellableFlag = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sellableFlag' field has been set.
      * @return True if the 'sellableFlag' field has been set, false otherwise.
      */
    public boolean hasSellableFlag() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sellableFlag' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearSellableFlag() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'globalQuantity' field.
      * Quantity of SKU/Status/Type/Sellable
      * @return The value.
      */
    public long getGlobalQuantity() {
      return globalQuantity;
    }


    /**
      * Sets the value of the 'globalQuantity' field.
      * Quantity of SKU/Status/Type/Sellable
      * @param value The value of 'globalQuantity'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setGlobalQuantity(long value) {
      validate(fields()[6], value);
      this.globalQuantity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'globalQuantity' field has been set.
      * Quantity of SKU/Status/Type/Sellable
      * @return True if the 'globalQuantity' field has been set, false otherwise.
      */
    public boolean hasGlobalQuantity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'globalQuantity' field.
      * Quantity of SKU/Status/Type/Sellable
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearGlobalQuantity() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'localQuantity' field.
      * Quantity of Location/SKU/Status/Type/Sellable
      * @return The value.
      */
    public long getLocalQuantity() {
      return localQuantity;
    }


    /**
      * Sets the value of the 'localQuantity' field.
      * Quantity of Location/SKU/Status/Type/Sellable
      * @param value The value of 'localQuantity'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setLocalQuantity(long value) {
      validate(fields()[7], value);
      this.localQuantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'localQuantity' field has been set.
      * Quantity of Location/SKU/Status/Type/Sellable
      * @return True if the 'localQuantity' field has been set, false otherwise.
      */
    public boolean hasLocalQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'localQuantity' field.
      * Quantity of Location/SKU/Status/Type/Sellable
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearLocalQuantity() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'serialNumber' field.
      * @return The value.
      */
    public java.lang.String getSerialNumber() {
      return serialNumber;
    }


    /**
      * Sets the value of the 'serialNumber' field.
      * @param value The value of 'serialNumber'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setSerialNumber(java.lang.String value) {
      validate(fields()[8], value);
      this.serialNumber = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'serialNumber' field has been set.
      * @return True if the 'serialNumber' field has been set, false otherwise.
      */
    public boolean hasSerialNumber() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'serialNumber' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearSerialNumber() {
      serialNumber = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setEventId(java.lang.String value) {
      validate(fields()[9], value);
      this.eventId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'process' field.
      * @return The value.
      */
    public java.lang.String getProcess() {
      return process;
    }


    /**
      * Sets the value of the 'process' field.
      * @param value The value of 'process'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setProcess(java.lang.String value) {
      validate(fields()[10], value);
      this.process = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'process' field has been set.
      * @return True if the 'process' field has been set, false otherwise.
      */
    public boolean hasProcess() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'process' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearProcess() {
      process = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'movementSource' field.
      * @return The value.
      */
    public java.lang.String getMovementSource() {
      return movementSource;
    }


    /**
      * Sets the value of the 'movementSource' field.
      * @param value The value of 'movementSource'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setMovementSource(java.lang.String value) {
      validate(fields()[11], value);
      this.movementSource = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'movementSource' field has been set.
      * @return True if the 'movementSource' field has been set, false otherwise.
      */
    public boolean hasMovementSource() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'movementSource' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearMovementSource() {
      movementSource = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'locationType' field.
      * @return The value.
      */
    public java.lang.String getLocationType() {
      return locationType;
    }


    /**
      * Sets the value of the 'locationType' field.
      * @param value The value of 'locationType'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setLocationType(java.lang.String value) {
      validate(fields()[12], value);
      this.locationType = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'locationType' field has been set.
      * @return True if the 'locationType' field has been set, false otherwise.
      */
    public boolean hasLocationType() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'locationType' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearLocationType() {
      locationType = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialDescription' field.
      * @return The value.
      */
    public java.lang.String getMaterialDescription() {
      return materialDescription;
    }


    /**
      * Sets the value of the 'materialDescription' field.
      * @param value The value of 'materialDescription'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setMaterialDescription(java.lang.String value) {
      validate(fields()[13], value);
      this.materialDescription = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'materialDescription' field has been set.
      * @return True if the 'materialDescription' field has been set, false otherwise.
      */
    public boolean hasMaterialDescription() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'materialDescription' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearMaterialDescription() {
      materialDescription = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdBy' field.
      * @return The value.
      */
    public java.lang.String getCreatedBy() {
      return createdBy;
    }


    /**
      * Sets the value of the 'createdBy' field.
      * @param value The value of 'createdBy'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setCreatedBy(java.lang.String value) {
      validate(fields()[14], value);
      this.createdBy = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'createdBy' field has been set.
      * @return True if the 'createdBy' field has been set, false otherwise.
      */
    public boolean hasCreatedBy() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'createdBy' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearCreatedBy() {
      createdBy = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdatedBy' field.
      * @return The value.
      */
    public java.lang.String getLastUpdatedBy() {
      return lastUpdatedBy;
    }


    /**
      * Sets the value of the 'lastUpdatedBy' field.
      * @param value The value of 'lastUpdatedBy'.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder setLastUpdatedBy(java.lang.String value) {
      validate(fields()[15], value);
      this.lastUpdatedBy = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdatedBy' field has been set.
      * @return True if the 'lastUpdatedBy' field has been set, false otherwise.
      */
    public boolean hasLastUpdatedBy() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'lastUpdatedBy' field.
      * @return This builder.
      */
    public com.swatikher.schema.InventoryCount.Builder clearLastUpdatedBy() {
      lastUpdatedBy = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InventoryCount build() {
      try {
        InventoryCount record = new InventoryCount();
        record.state = fieldSetFlags()[0] ? this.state : (java.lang.String) defaultValue(fields()[0]);
        record.location = fieldSetFlags()[1] ? this.location : (java.lang.String) defaultValue(fields()[1]);
        record.sku = fieldSetFlags()[2] ? this.sku : (java.lang.String) defaultValue(fields()[2]);
        record.inventoryStatus = fieldSetFlags()[3] ? this.inventoryStatus : (java.lang.String) defaultValue(fields()[3]);
        record.inventoryType = fieldSetFlags()[4] ? this.inventoryType : (java.lang.String) defaultValue(fields()[4]);
        record.sellableFlag = fieldSetFlags()[5] ? this.sellableFlag : (java.lang.Boolean) defaultValue(fields()[5]);
        record.globalQuantity = fieldSetFlags()[6] ? this.globalQuantity : (java.lang.Long) defaultValue(fields()[6]);
        record.localQuantity = fieldSetFlags()[7] ? this.localQuantity : (java.lang.Long) defaultValue(fields()[7]);
        record.serialNumber = fieldSetFlags()[8] ? this.serialNumber : (java.lang.String) defaultValue(fields()[8]);
        record.eventId = fieldSetFlags()[9] ? this.eventId : (java.lang.String) defaultValue(fields()[9]);
        record.process = fieldSetFlags()[10] ? this.process : (java.lang.String) defaultValue(fields()[10]);
        record.movementSource = fieldSetFlags()[11] ? this.movementSource : (java.lang.String) defaultValue(fields()[11]);
        record.locationType = fieldSetFlags()[12] ? this.locationType : (java.lang.String) defaultValue(fields()[12]);
        record.materialDescription = fieldSetFlags()[13] ? this.materialDescription : (java.lang.String) defaultValue(fields()[13]);
        record.createdBy = fieldSetFlags()[14] ? this.createdBy : (java.lang.String) defaultValue(fields()[14]);
        record.lastUpdatedBy = fieldSetFlags()[15] ? this.lastUpdatedBy : (java.lang.String) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InventoryCount>
    WRITER$ = (org.apache.avro.io.DatumWriter<InventoryCount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InventoryCount>
    READER$ = (org.apache.avro.io.DatumReader<InventoryCount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.state);

    out.writeString(this.location);

    out.writeString(this.sku);

    out.writeString(this.inventoryStatus);

    out.writeString(this.inventoryType);

    out.writeBoolean(this.sellableFlag);

    out.writeLong(this.globalQuantity);

    out.writeLong(this.localQuantity);

    if (this.serialNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.serialNumber);
    }

    if (this.eventId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventId);
    }

    if (this.process == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.process);
    }

    if (this.movementSource == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.movementSource);
    }

    if (this.locationType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.locationType);
    }

    if (this.materialDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.materialDescription);
    }

    if (this.createdBy == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.createdBy);
    }

    if (this.lastUpdatedBy == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lastUpdatedBy);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.state = in.readString();

      this.location = in.readString();

      this.sku = in.readString();

      this.inventoryStatus = in.readString();

      this.inventoryType = in.readString();

      this.sellableFlag = in.readBoolean();

      this.globalQuantity = in.readLong();

      this.localQuantity = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.serialNumber = null;
      } else {
        this.serialNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventId = null;
      } else {
        this.eventId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.process = null;
      } else {
        this.process = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.movementSource = null;
      } else {
        this.movementSource = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.locationType = null;
      } else {
        this.locationType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.materialDescription = null;
      } else {
        this.materialDescription = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.createdBy = null;
      } else {
        this.createdBy = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastUpdatedBy = null;
      } else {
        this.lastUpdatedBy = in.readString();
      }

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.state = in.readString();
          break;

        case 1:
          this.location = in.readString();
          break;

        case 2:
          this.sku = in.readString();
          break;

        case 3:
          this.inventoryStatus = in.readString();
          break;

        case 4:
          this.inventoryType = in.readString();
          break;

        case 5:
          this.sellableFlag = in.readBoolean();
          break;

        case 6:
          this.globalQuantity = in.readLong();
          break;

        case 7:
          this.localQuantity = in.readLong();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.serialNumber = null;
          } else {
            this.serialNumber = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventId = null;
          } else {
            this.eventId = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.process = null;
          } else {
            this.process = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.movementSource = null;
          } else {
            this.movementSource = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.locationType = null;
          } else {
            this.locationType = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.materialDescription = null;
          } else {
            this.materialDescription = in.readString();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.createdBy = null;
          } else {
            this.createdBy = in.readString();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastUpdatedBy = null;
          } else {
            this.lastUpdatedBy = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










